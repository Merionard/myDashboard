generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  emailVerified String?
  role        Role     @default(USER)
  image       String?
  workPeriods WorkPeriod[]
  accounts      Account[]
  sessions      Session[]
}

model Customer {
  id              Int @id @default(autoincrement())
  businessName    String
  vatNumber       String?
  siren           String?
  address         Address[]
  contact         Contact?
}

model Contact {
  id      Int @id @default(autoincrement())
  name    String
  firstName String
  email   String
  customer Customer @relation(fields:[customerId], references:[id], onDelete:Cascade, onUpdate: Cascade)
  customerId Int    @unique
}

model Address {
  id          Int @id @default(autoincrement())
  poCode      String
  country     String
  addressName        String
  number      String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete:Cascade, onUpdate: Cascade)
  customerId  Int
  siret       String?
}

model WorkPeriod {
id          Int @id @default(autoincrement())
month       Int
year        Int
user        User @relation(fields: [userId], references: [id])
userId      String
lines       WorkPeriodLine[]
}

model WorkPeriodLine {
id            Int @id @default(autoincrement())
customerId    Int
workPeriod    WorkPeriod @relation(fields: [workPeriodId], references: [id])
workPeriodId  Int
nbDaysWorked  Int
workDays      WorkDay[]
}

model WorkDay {
  id            Int @id @default(autoincrement())
  date          DateTime
  workPeriodLine WorkPeriodLine @relation(fields: [workPeriodLineId], references: [id],onDelete:Cascade, onUpdate: Cascade)
  workPeriodLineId Int
  duration      Float @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invoice {
  id            Int @id @default(autoincrement())
  number        String @unique
  type          InvoiceType
  statut        InvoiceStatus
  customerName  String 
  customerSociety String?
  customerSiren  String? @unique
  customerVatNumber String?
  customerAddress String
  customerCountry String
  customerMail    String?
  conditionReglement  String
  modeReglement   String
  createdAt     DateTime
  validateAt    DateTime?
  payedAt       DateTime?
  lines       InvoiceLine[]
  totalHT     Float
  totalTTC    Float

}

model InvoiceLine {
  id            Int @id @default(autoincrement())
  invoice       Invoice @relation(fields: [invoiceId], references: [id],onDelete:Cascade, onUpdate: Cascade)
  invoiceId     Int
  type          String
  unitPrice     Float
  quantity      Int
  vatRate       Int
  totalHT         Float
  totalTTC      Float
  VatAmount     Float

}

model Compteur {
  type  InvoiceType @id
  count Int
}

enum InvoiceStatus {
  DRAFT
  CANCELED
  VALIDATED
  PAYED
}


enum InvoiceType {
  INVOICE
  CREDIT_NOTE
}


enum Role {
  USER
  ADMIN
}